plugins {
    id("io.micronaut.library") version "2.0.6"
    id("com.github.johnrengelman.shadow") version "7.0.0"
}

version = "0.1"
group = "com.example"

repositories {
    mavenCentral()
}

micronaut {
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.example.*")
    }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
    invoker
}

dependencies {
    implementation('io.micronaut:micronaut-runtime:3.0.2')
    implementation('io.micronaut.gcp:micronaut-gcp-tracing:4.0.0')
    implementation('javax.annotation:javax.annotation-api:1.3.2')
    runtimeOnly('ch.qos.logback:logback-classic:1.2.6')
    implementation('io.micronaut:micronaut-validation:3.0.2')

    compileOnly('com.google.cloud.functions:functions-framework-api:1.0.4')

    implementation('io.micronaut.gcp:micronaut-gcp-function:4.0.0')

    testImplementation('com.google.cloud.functions:functions-framework-api:1.0.4')

    testImplementation('io.micronaut:micronaut-http-client:3.0.2')
    developmentOnly("io.micronaut:micronaut-http-server-netty")

    invoker 'com.google.cloud.functions.invoker:java-function-invoker:1.0.4'

}

task('runFunction', type: JavaExec, dependsOn: classes) {
    main = 'com.google.cloud.functions.invoker.runner.Invoker'
    classpath(configurations.invoker)
    args(
      '--target', 'io.micronaut.gcp.function.http.HttpFunction',
      '--classpath', (configurations.runtimeClasspath + sourceSets.main.output).asPath,
      '--port', 8081

    )
}


java {
    sourceCompatibility = JavaVersion.toVersion("11")
    targetCompatibility = JavaVersion.toVersion("11")
}



tasks.named("assemble") {
    dependsOn(":shadowJar")
}